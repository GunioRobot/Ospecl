#!/usr/bin/env ocaml

#use "topfind"
#require "str"
#require "unix"
#require "ospecl"
#thread


(* thread-safe mutable stack *)
module SafeStack : sig
  type 'a t
  val create : 'a list -> 'a t
  val pop : 'a t -> 'a option
end = struct
  type 'a t = {
    mutable stack : 'a list;
    lock : Mutex.t
  }

  let create items = {
    stack = items;
    lock = Mutex.create ()
  }

  let pop safe_stack =
    Mutex.lock safe_stack.lock;
    let top =
      match safe_stack.stack with
      | [] -> None
      | first::rest -> begin
          safe_stack.stack <- rest;
          Some first
        end
    in
    Mutex.unlock safe_stack.lock;
    top
end

let fire handlers event =
  List.iter (fun handle -> handle event) handlers

(* handle the events sent back for the execution of a single spec file *)
let rec handle_events_on in_chan handlers =
  let open Ospecl.Spec.Exec in
  match input_value in_chan with
  | Execution_finished -> () (* last event, so stop *)
  | Execution_started ->     (* skip these *)
      handle_events_on in_chan handlers
  | event -> begin
      fire handlers event;
      handle_events_on in_chan handlers
    end

let execute_remotely files handlers address =
  let (in_chan, out_chan) = Unix.open_connection address in
  let rec process_files files =
    match SafeStack.pop files with
    | None -> Unix.shutdown_connection in_chan
    | Some file -> begin
        output_string out_chan (file ^ "\n");
        flush out_chan;
        handle_events_on in_chan handlers;
        process_files files
      end
  in
  process_files files

let _ =
  let usage_message =
    let this_file = (Filename.basename Sys.argv.(0)) in
    Printf.sprintf "usage: %s [options] [spec files... ]

Connects to a running ospecl_server at the given address, and sends each spec file name to be executed there, handling the execution events as they are sent back. The supplied spec files should be source files which define a single top level value - (specs : Ospecl.Spec.t list).
" this_file
  in

  let parallel_connections = ref 1 in
  let color = ref false in
  let address_strings = ref [] in
  let spec_files = ref [] in

  let append_to list_ref value =
    list_ref := !list_ref @ [value]
  in

  let formatter = ref Ospecl.Console.progress in
  let formatters = [
    ("p", Ospecl.Console.progress);
    ("progress", Ospecl.Console.progress);
    ("d", Ospecl.Console.documentation);
    ("doc", Ospecl.Console.documentation);
    ("documentation", Ospecl.Console.documentation);
  ]
  in
  let choose_format f =
    formatter := List.assoc f formatters
  in

  Arg.parse (Arg.align [
    ("-address", Arg.String (append_to address_strings), "IP:PORT of a server to run the specs on");
    ("-j", Arg.Set_int parallel_connections, "N number of parallel connections to each server");
    ("-color", Arg.Set color, " enable color in the output");
    ("-format", Arg.Symbol (fst (List.split formatters), choose_format), " choose a formatter");
  ]) (append_to spec_files) usage_message;

  let addresses = List.map (fun address_string ->
    match Str.split (Str.regexp ":") address_string with
    | [domain; port] ->
        let inet_addr = Unix.inet_addr_of_string domain in
        let port_num = int_of_string port in
        Unix.ADDR_INET (inet_addr, port_num)
    | _ -> failwith "Addresses must be of the form <ip>:<port>"
  ) !address_strings
  in

  let handlers = !formatter ~color:!color in
  let spec_file_stack = SafeStack.create !spec_files in
  let servers =
    let repeat n value = Array.to_list (Array.make n value) in
    List.concat (List.map (repeat !parallel_connections) addresses)
  in

  fire handlers Ospecl.Spec.Exec.Execution_started;
  let threads = List.map (Thread.create (execute_remotely spec_file_stack handlers)) servers in
  List.iter Thread.join threads;
  fire handlers Ospecl.Spec.Exec.Execution_finished;
